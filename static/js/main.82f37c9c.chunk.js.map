{"version":3,"sources":["containers/ControlPanel/ControlPanel.module.scss","components/MeetingScreen/MeetingScreen.module.scss","containers/Game/Store.ts","components/GameGrid/index.tsx","containers/ControlPanel/index.tsx","components/MeetingScreen/index.tsx","containers/Game/index.tsx","index.tsx"],"names":["module","exports","action","bound","gridSize","randomBoolean","Math","random","initialGridList","list","i","push","j","this","gridList","size","newGridList","JSON","parse","stringify","countAliveValue","count","countAlive","observable","GameGrid","observer","props","cellHeight","gameStore","cellWidth","length","gridRowSize","canvasRef","useRef","ctx","current","getContext","y","x","fillStyle","strokeStyle","strokeRect","fillRect","style","margin","display","border","ref","width","height","ControlPanel","className","s","initialValues","interval","ms","validationSchema","Yup","required","onSubmit","values","setSubmitting","setMs","changeSize","isSubmitting","Form","Field","type","name","component","disabled","Button","onClick","refresh","MeetingScreen","data-testid","switchOn","Game","useState","isTheGameOn","useEffect","effect","setInterval","GameStore","tick","clearInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82f37c9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlPanel\":\"ControlPanel_ControlPanel__2112M\",\"Form\":\"ControlPanel_Form__3ZR5b\",\"Field\":\"ControlPanel_Field__3tpdc\",\"Button\":\"ControlPanel_Button__14-ja\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MeetingScreen\":\"MeetingScreen_MeetingScreen__1rYGS\"};","import { observable, action } from \"mobx\";\r\n\r\ntype GridList = Array<Array<boolean>>;\r\nexport class Game {\r\n  @observable public gridSize: number;\r\n  @observable public gridList: GridList;\r\n\r\n  private randomBoolean = (): boolean => {\r\n    return Math.random() >= 0.5;\r\n  };\r\n\r\n  private initialGridList = (): GridList => {\r\n    let list: GridList = [];\r\n    for (let i = 0; i < this.gridSize; i++) {\r\n      list.push([]);\r\n      for (let j = 0; j < this.gridSize; j++) {\r\n        list[i].push(this.randomBoolean());\r\n      }\r\n    }\r\n    return list;\r\n  };\r\n\r\n  @action.bound changeSize(size: number): void {\r\n    this.gridSize = size;\r\n    this.gridList = this.initialGridList();\r\n  }\r\n\r\n  @action.bound refresh(): void {\r\n    this.gridList = this.initialGridList();\r\n  }\r\n\r\n  @action.bound tick(): void {\r\n    const newGridList: GridList = JSON.parse(JSON.stringify(this.gridList));\r\n\r\n    for (let i = 0; i < this.gridSize; i++) {\r\n      for (let j = 0; j < this.gridSize; j++) {\r\n        const countAlive = (): number => {\r\n          let count: number = 0;\r\n          if (i !== 0) {\r\n            count += +this.gridList[i - 1][j];\r\n            if (j !== 0) {\r\n              count += +this.gridList[i - 1][j - 1];\r\n            }\r\n            if (j !== this.gridSize - 1) {\r\n              count += +this.gridList[i - 1][j + 1];\r\n            }\r\n          }\r\n          if (i !== this.gridSize - 1) {\r\n            count += +this.gridList[i + 1][j];\r\n            if (j !== 0) {\r\n              count += +this.gridList[i + 1][j - 1];\r\n            }\r\n            if (j !== this.gridSize - 1) {\r\n              count += +this.gridList[i + 1][j + 1];\r\n            }\r\n          }\r\n          if (j !== 0) {\r\n            count += +this.gridList[i][j - 1];\r\n          }\r\n          if (j !== this.gridSize - 1) {\r\n            count += +this.gridList[i][j + 1];\r\n          }\r\n          return count;\r\n        };\r\n\r\n        const countAliveValue = countAlive();\r\n        if (newGridList[i][j]) {\r\n          if (countAliveValue < 2) {\r\n            newGridList[i][j] = false;\r\n          } else if (countAliveValue > 3) {\r\n            newGridList[i][j] = false;\r\n          }\r\n        } else {\r\n          if (countAliveValue === 3) {\r\n            newGridList[i][j] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.gridList = newGridList;\r\n  }\r\n\r\n  constructor(gridSize: number = 50) {\r\n    this.gridSize = gridSize;\r\n    this.gridList = this.initialGridList();\r\n  }\r\n}\r\n\r\nexport default new Game();\r\n","import React, { useRef } from \"react\";\r\nimport { Game as GameStoreType } from \"../../containers/Game/Store\";\r\nimport { observer } from \"mobx-react\";\r\ntype Props = {\r\n  gameStore: GameStoreType;\r\n};\r\n\r\nconst GameGrid = observer((props: Props) => {\r\n  // Canvas size\r\n  const canvasWidth: number = 500;\r\n  const canvasHeight: number = 500;\r\n  // Single square size\r\n  const cellHeight: number = canvasHeight / props.gameStore.gridSize;\r\n  const cellWidth: number = canvasWidth / props.gameStore.gridList.length;\r\n  // X * Y sizes\r\n  const gridSize: number = props.gameStore.gridSize;\r\n  const gridRowSize: number = props.gameStore.gridList.length;\r\n  // Canvas\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const ctx = canvasRef.current?.getContext(\"2d\");\r\n  // Square\r\n  for (let i = 0, y = 0; i < gridSize; i++, y += cellHeight) {\r\n    for (let j = 0, x = 0; j < gridRowSize; j++, x += cellWidth) {\r\n      if (ctx) {\r\n        ctx.fillStyle = props.gameStore.gridList[i][j] ? \"black\" : \"white\";\r\n        ctx.strokeStyle = \"#ccc\";\r\n        ctx.strokeRect(x, y, cellHeight, cellWidth);\r\n        ctx.fillRect(x, y, cellHeight, cellWidth);\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <canvas\r\n      style={{\r\n        margin: \"20px auto\",\r\n        display: \"block\",\r\n        border: \"1px solid #ccc\"\r\n      }}\r\n      ref={canvasRef}\r\n      width={canvasWidth}\r\n      height={canvasHeight}\r\n    ></canvas>\r\n  );\r\n});\r\n\r\nexport default GameGrid;\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport s from \"./ControlPanel.module.scss\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { Game } from \"../Game/Store\";\r\nimport * as Yup from \"yup\";\r\n\r\ntype Props = {\r\n  gameStore: Game;\r\n  interval: {\r\n    ms: number;\r\n    setMs: Dispatch<SetStateAction<number>>;\r\n  };\r\n};\r\n\r\nconst ControlPanel = (props: Props) => {\r\n  return (\r\n    <div className={s.ControlPanel}>\r\n      <Formik\r\n        initialValues={{\r\n          interval: props.interval.ms,\r\n          gridSize: props.gameStore.gridSize\r\n        }}\r\n        validationSchema={Yup.object({\r\n          interval: Yup.number().required(\"Required\"),\r\n          gridSize: Yup.number().required(\"Required\")\r\n        })}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          props.interval.setMs(values.interval);\r\n          props.gameStore.changeSize(values.gridSize);\r\n          setSubmitting(false);\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form className={s.Form}>\r\n            <label className={s.Field}>\r\n              <span>{props.interval.ms / 1000} s</span>\r\n              <Field type=\"number\" name=\"interval\" />\r\n              <ErrorMessage name=\"interval\" component=\"div\" />\r\n            </label>\r\n            <label className={s.Field}>\r\n              <span>\r\n                {props.gameStore.gridSize}x{props.gameStore.gridSize}\r\n              </span>\r\n              <Field type=\"number\" name=\"gridSize\" />\r\n              <ErrorMessage name=\"gridSize\" component=\"div\" />\r\n            </label>\r\n\r\n            <button type=\"submit\" disabled={isSubmitting} className={s.Button}>\r\n              Save\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <button className={s.Button} onClick={props.gameStore.refresh}>\r\n        Refresh\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ControlPanel;\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport s from \"./MeetingScreen.module.scss\";\r\ninterface Props {\r\n  switchOn: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst MeetingScreen = (props: Props) => {\r\n  return (\r\n    <div className={s.MeetingScreen} data-testid=\"meeting-screen\">\r\n      <h3>Welcome in the Game</h3>\r\n      <p>Press start to continue!!!</p>\r\n      <button onClick={() => props.switchOn(true)} data-testid=\"start-btn\">\r\n        Start\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeetingScreen;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport GameStore from \"./Store\";\r\nimport GameGrid from \"../../components/GameGrid\";\r\nimport ControlPanel from \"../ControlPanel\";\r\nimport MeetingScreen from \"../../components/MeetingScreen\";\r\n\r\nconst Game = observer(() => {\r\n  const [ms, setMs] = useState<number>(400);\r\n  const [isTheGameOn, switchOn] = useState<boolean>(false);\r\n  useEffect(() => {\r\n    if (isTheGameOn) {\r\n      const effect = setInterval(() => {\r\n        GameStore.tick();\r\n      }, ms);\r\n      return () => {\r\n        clearInterval(effect);\r\n      };\r\n    }\r\n  }, [isTheGameOn, ms]);\r\n  return (\r\n    <div>\r\n      {isTheGameOn ? (\r\n        <div data-testid=\"game\">\r\n          <GameGrid gameStore={GameStore} />\r\n          <ControlPanel gameStore={GameStore} interval={{ ms, setMs }} />\r\n        </div>\r\n      ) : (\r\n        <MeetingScreen switchOn={switchOn} />\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport Game from \"./containers/Game\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}